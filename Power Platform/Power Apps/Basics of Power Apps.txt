Behavior vs Non-behavior formulas

- Behavior: 
  * They change the app behavior
  * You can have a sequence of actions with these formulas
  * They 'usually' don't have return values
  * We use them with 'On..' properties 
    Example: OnSelect, OnFocus,..

- Non-behavior: 
  * They work like excel formulas
  * You can have only one formula per property
  * They don't change the app behavior
  * They return a value
  * We use them with properties that don't have 'On..' in the begaining
    Example: Fill, Text, ...

  ** Note: Typically when doing formulas in Power Apps you select a control, screen, 
	     component or evern the App it's self then select the property on the left 
           drop down that we want the formula to respond too. 


- How to Bridge between behavior and non-behavior properties?
  Answer: Use Variables!
  
  * Use Set to create variables
    - Set([variable name], [value]):
      * Is a behavioral function
      * Can create a variable fo all data types
      * Variables are global
      ** Note: Replaces the entire record of the variable, can't use to update one parameter in a complex object. 
               If other parameters are not there they are set to null.
    - Problem with Set()
      * Always there is a chance to overwrite variables by mistake
	* Adds unnecessary items to your intellisense
	* As your app grows it makes maintaining the app more difficult
	* It is against a modular design. Set() makes dependancies between screens which is against modular design.
      * More difficult to trace the values and debug.

- Understand and working with Records
  -> Context: 
     - Is a record that is defined for every screen that you can easily add variables to it. Add variables to one
       Context for that screen. Context are only usable with in the scope of the screen. 
       Function to create context: UpdateContext({[variable]:[value]});
       Example: UpdateContext({var_Name:"Jay"});
       ** Note: UpdateContext() allows you to update one variable or parameter in an object, unlike Set() which overrides what you didn't put in. 
       
- Table and Arrays
-> Table([record],[record],...)
   
