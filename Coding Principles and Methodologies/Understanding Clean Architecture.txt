- All-In-One Architecture (Monolith)
  Monolithic software is designed to be self-contained, wherein the program's components or functions are tightly coupled rather 
  than loosely coupled, like in modular software programs. In a monolithic architecture, each component and its associated components 
  must all be present for code to be executed or compiled and for the software to run.

  Monolithic applications are single-tiered, which means multiple components are combined into one large application. Consequently, 
  they tend to have large codebases, which can be cumbersome to manage over time. 

  Pros:
    * Easier to deliver
    * Can be stable and a long term solution

  Cons:
    * Hard to enforce S.O.L.I.D Principles
    * Harder to maintain as a project grows
    * Harder to Test

- Layered Architecture
  The layered architecture style is one of the most common architectural styles. The idea behind Layered Architecture is that 
  modules or components with similar functionalities are organized into horizontal layers. As a result, each layer performs a 
  specific role within the application. Allows for clearier boundries from an All-in-one.
  
  Typical layered structure:
  -> Web Layer
     * Controllers, exception handlers, filters, view templates, and what the users will interact with (UI/UX).

  -> Service Layer
     * Application services and infrastructure services which contains the 3rd party applications (Email services, logging services, ect)

  -> Repository / Business Logic Layer
     * Repository interfaces and their implementations which contains Data Access, conditional logic that make the application
       unique. 

  Pros:
    * Better enforcing of S.O.L.I.D Principles
    * Easier to maintain larger code base

  Cons:
    * Layers are dependent
    * Still acts as one application (Monolith)
    * Logic is sometimes scattered across layers, so you'd have to update multiple layers for one update potientially


- Onion Architecture
  Onion Architecture guides software engineers to model their business logic in a core collection with no coupling to the outer 
  concerns, such as database choice or how the user interface operates. Onion architecture is a software architectural configuration 
  to maintain libraries and dependencies on the extremities of a software system while sustaining a strong and cohesive system core. 

  Developing a system core which is both stable and efficient is essential when basing a systemâ€™s architecture to that of an onion. 
  By emphasizing the separation of concerns and dependencies in this layered fashion, this will increase the quantity of 
  maintainable applications running simultaneously. If onion based architecture is set up properly, it is intended to provide 
  insurance against the evolution of technology that can make products obsolete not long after they are developed. Onion Architecture
  builds on top of Layered Architecture.

  Typical onion structure:
  -> Application Core:
     Everything connects to the application core. Application core contains the following items:
     - Applicaton Services Interfaces which contains:
       - Domain Service Interfaces which contains:
         - Domain Entities
 
  -> User Interface:
     Connects to the application cores Application Service Interfaces. Can include projects like ASP.NET, WPF, Console, etc

  -> API Services:
     Connects to the application cores Application Service Interfaces. Can include projects like REST, WCF, etc

  -> Test:
     Connects to the application cores Application Service Interfaces. Can include projects for Unit Tests, 
     Intergration Tests, etc

  -> Infrastructure:
     Connects to the application cores Application Service Interfaces. Can include projects for Data Access, SMTP Server (email),
     Logging, Object Mappers (AutoMapper), etc.

  Pros:
    * It provides better testability as unit tests can be created for seperate layers
    * Easier to make changes in code base without directly affecting other modules
    * Promotes loose coupling between layers
    * Better sustainability over time with simplified indexing
    * Reduce dependencies within your platform
    * Flexible infrastructure enabling free range use of data
    * Removes the need for common or shared documents/projects
    * Data Access and UI layers are reduced in size and complexity

  Cons:
    * Longer learning curve 
    * Very time consuming