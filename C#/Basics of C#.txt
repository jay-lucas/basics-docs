What does public do?
- 

What does private do?
- 

What does abstract do?
- An abstract class is an incomplete class or special class that can't be instantiated on it's own. 
  The purpose of an abstract class is to provide a blueprint for derived classes and set some rules 
  what the derived classes must implement when they inherit an abstract class. Only used for inheritance
  purposes.

What does override do?
- 


What does 'boxing' mean?

What does the 'ref' mean?

What does the 'val' mean? 

What does the 'out' keyword do? : The out keyword causes arguments to be passed by reference. It makes the formal parameter an alias 
					      for the argument, which must be a variable. In other words, any operation on the parameter is made 
						on the argument. It is like the ref keyword, except that ref requires that the variable be initialized
						before it is passed. It is also like the in keyword, except that in does not allow the called method 
						to modify the argument value. To use an out parameter, both the method definition and the calling 
						method must explicitly use the out keyword. 

						** Note: The out keyword must be explicitly declared in the method’s definition​ as well 
							   as in the calling method. 
						*** Note: This is a way for a method to “return” multiple values. There is no 
							    explicit return value, but num1 and num2 are both updated inside the method, and their 
						          updated values are reflected outside the method.

                                    Example:
						using System;
						class HelloWorld
						{
						    public static void Add(out int num1, out int num2) 
						    { 
						      num1 = 30; 
						      num1 += 1; 

						      num2 = 40;
						      num2 += 1;
						    } 

						    static void Main()
						    {
						      // Declare two without assigning a value.
						      int num1;
						      int num2;

						      // Call the Add method and pass it as an out parameter.
						      Add(out num1, out num2);  
						      Console.WriteLine("Num1: {0}", num1); 
						      Console.WriteLine("Num2: {0}", num2); 
						    }
						}


Transient Error Handling with automatic Retries in C# Inspired by Transient Fault Handling we created a quick helper class to faciliate the automatic retry of various operation that may fail in today’s interconnected environments. Large parts of our Appclusive framework deal with fetching from and pushing information to various backend systems						
