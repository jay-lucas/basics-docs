Creating a WebApi Project
1) Select ASP.NET Core Web API for C#
2) Additional Information Settings
   * Configure for HTTPS
   * Use controllers
   * Enable OpenAPI support

What is Swagger?
- Swagger is an open source set of rules, specifications and tools for developing and describing 
  RESTful APIs. The Swagger framework allows developers to create interactive, machine and human-readable 
  API documentation. It's an interactive user interface automatically Built into .NET 5 and .NET 6.

About WebApi & MVC projects files
- Solution : 
  A registration directory for all the projection 

- Project File (.csproj) : 
  Configuration in XML format of the project

- Connected Services : 
  TBD

- Dependencies
  Library's that the project depend on to run.

- Properties
  Contains a file called launchSettings.json. This is a configuration file with details about how 
  the app should behave.

- Controllers 
  These control the web traffic. 

- appsettings.json
  Specific configurations for the application that can be accessed anywhere within the application using
  dependancy injection or the IOC container.

- Program.cs
  Configures the services and configure the application.

Configure Logging using Serilog

- What is Serilog?
  Serilog is an easy-to-set-up logging library for .NET with a clear API. One of the most recommended libraries.
  Serilog allow you to write same logs to more sources simultaneously and gives you more flexiblity of retrieving 
  them afterwards.
  In the long list of the Serilog's features you can find:

	* Support of structured logging, which allows logs to be treated as data sets rather than text.
	* Compatibility with asynchronous applications and systems.
	* Multiple logging targets, such as files, console, email, and many other outputs.
	* Message templates, that helps you to serialize objects using the @ operator

  -> To add Serilog to WebApi Application
     1) In the Program.cs file, under the last configured 'Service' 
        Example : After builder.Services.AddSwaggerGen()
    
     2) Type builder.Host.UseSeriLog()
     3) Open Nuget package manager and search and install:
        -> SeriLog.AspNetCore
 	  -> SeriLog.Expressions 
           ** Note: This allows us to put the configurations for SeriLog in appsettings.json 

     4) Go over to appsettings.json / appsettings.Development.json and remove the standard "Logging" sections

     5) Add to the appsettings.json file a new object:
        "SeriLog": {
          "MinimumLevel": {
             "Default": "Information",
             "Override": {
                "Microsoft": "Warning",
                "Microsoft.Hosting.Lifetime":  "Information"
              }
           },
    	     "WriteTo": [ --> Allows us to define all the destinations for the logs to go to (more than one by {})
		 {  
      	   "Name": "File",
               "Args": {
        	      "path": "./logs/log-.txt", --> '.' means root folder, and files should start off with 'log-'
        	      "rollingInterval": "Day" --> Creates a unique file name for each day. 
      	   }
    		 }
           ]
         }

	6) Go back to program.cs file and complete the setup of UseSerilog with adding a delegate function
         .UseSerilog((ctx, lc) =>
		lc.WriteTo.Console().ReadFrom.Configuration(ctx.Configuration)
         );

 How to Use the SeriLog in your code
 - When you make the Program.cs service changes to include SeriLog, you can now use the ILogger standard
   and SeriLog will pick up the logs. The configuration for SeriLog in the appsettings.json file for the
   "Args" -> "path" actually creates a folder in the main directory using the "rollingInterval" to format
   the file name to the .txt file in the "path" parameter.

 * Limitations:
   - Can't access log file while program is running

   -> Work Around for SeriLog limitations : 'Seq'

      What is Seq?
      - Seq is built for modern structured logging with message templates. Rather than waste time and effort 
        trying to extract data from plain-text logs with fragile log parsing, the properties associated with 
	  each log event are captured and sent to Seq in a clean JSON format. Message templates are supported 
	  natively by ASP.NET Core, Serilog, NLog, and many other libraries, so your application can use the 
	  best available diagnostic logging for your platform.

        Seq accepts logs via HTTP, GELF, custom inputs, and the seqcli command-line client, with plug-ins or 
	  integrations available for .NET Core, Java, Node.js, Python, Ruby, Go, Docker, message queues, and many 
        other technologies.

      How to use Seq.
      - you must download it from datalust.co/seq website, free for download for very small scale use.
        ** Note: This sets up a service to run in the background of your PC and gives you a default port.
   
      - In the appsettings.json file add another section to "WriteTo" for Seq
      {
        "Name": "Seq",
        "Args": { "serverUrl":  "http://localhost:5341"} -> This is the default port Seq uses unless specified otherwise.
      }


  - What is Cross-Origin Resource Sharing (CORS)?
    Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) 
    other than its own from which a browser should permit loading resources. CORS also relies on a mechanism by which browsers make a "preflight" 
    request to the server hosting the cross-origin resource, in order to check that the server will permit the actual request. In that preflight, 
    the browser sends headers that indicate the HTTP method and headers that will be used in the actual request. CORS Policy restricts the machines 
    that access an API. 
    
    -> To use CORS in .NET API application
    * In the services section of Program.cs
      builder.Services.AddCors(options => {
      	options.AddPolicy("AllowAll", b => b.AllowAnyMethod()
					   b.AllowAnyHeader()
					   b.AllowAnyOrgin());
	});
    
    * In the application section of Program.cs
      app.UseCors("AllowAll"); ** Note: You add the name of the Cors Policy 
