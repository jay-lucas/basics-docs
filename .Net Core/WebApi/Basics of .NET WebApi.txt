Creating a WebApi Project
1) Select ASP.NET Core Web API for C#
2) Additional Information Settings
   * Configure for HTTPS
   * Use controllers
   * Enable OpenAPI support

What is Swagger?
- Swagger is an open source set of rules, specifications and tools for developing and describing 
  RESTful APIs. The Swagger framework allows developers to create interactive, machine and human-readable 
  API documentation. It's an interactive user interface automatically Built into .NET 5 and .NET 6.

About WebApi & MVC projects files
- Solution : 
  A registration directory for all the projection 

- Project File (.csproj) : 
  Configuration in XML format of the project

- Connected Services : 
  TBD

- Dependencies
  Library's that the project depend on to run.

- Properties
  Contains a file called launchSettings.json. This is a configuration file with details about how 
  the app should behave.

- Controllers 
  These control the web traffic. 

- appsettings.json
  Specific configurations for the application that can be accessed anywhere within the application using
  dependancy injection or the IOC container.

- Program.cs
  Configures the services and configure the application.

Configure Logging using Serilog

- What is Serilog?
  Serilog is an easy-to-set-up logging library for .NET with a clear API. One of the most recommended libraries.
  Serilog allow you to write same logs to more sources simultaneously and gives you more flexiblity of retrieving 
  them afterwards.
  In the long list of the Serilog's features you can find:

	* Support of structured logging, which allows logs to be treated as data sets rather than text.
	* Compatibility with asynchronous applications and systems.
	* Multiple logging targets, such as files, console, email, and many other outputs.
	* Message templates, that helps you to serialize objects using the @ operator

  -> To add Serilog to WebApi Application
     1) In the Program.cs file, under the last configured 'Service' 
        Example : After builder.Services.AddSwaggerGen()
    
     2) Type builder.Host.UseSeriLog()
     3) Open Nuget package manager and search and install:
        -> SeriLog.AspNetCore
 	  -> SeriLog.Expressions 
           ** Note: This allows us to put the configurations for SeriLog in appsettings.json 

     4) Go over to appsettings.json / appsettings.Development.json and remove the standard "Logging" sections

     5) Add to the appsettings.json file a new object:
        "SeriLog": {
          "MinimumLevel": {
             "Default": "Information",
             "Override": {
                "Microsoft": "Warning",
                "Microsoft.Hosting.Lifetime":  "Information"
              }
           },
    	     "WriteTo": [ --> Allows us to define all the destinations for the logs to go to (more than one by {})
		 {  
      	   "Name": "File",
               "Args": {
        	      "path": "./logs/log-.txt", --> '.' means root folder, and files should start off with 'log-'
        	      "rollingInterval": "Day" --> Creates a unique file name for each day. 
      	   }
    		 }
           ]
         }

	6) Go back to program.cs file and complete the setup of UseSerilog with adding a delegate function
         .UseSerilog((ctx, lc) =>
		lc.WriteTo.Console().ReadFrom.Configuration(ctx.Configuration)
         );

 How to Use the SeriLog in your code
 - When you make the Program.cs service changes to include SeriLog, you can now use the ILogger standard
   and SeriLog will pick up the logs. The configuration for SeriLog in the appsettings.json file for the
   "Args" -> "path" actually creates a folder in the main directory using the "rollingInterval" to format
   the file name to the .txt file in the "path" parameter.

 * Limitations:
   - Can't access log file while program is running

   -> Work Around for SeriLog limitations : 'Seq'

      What is Seq?
      - Seq is built for modern structured logging with message templates. Rather than waste time and effort 
        trying to extract data from plain-text logs with fragile log parsing, the properties associated with 
	  each log event are captured and sent to Seq in a clean JSON format. Message templates are supported 
	  natively by ASP.NET Core, Serilog, NLog, and many other libraries, so your application can use the 
	  best available diagnostic logging for your platform.

        Seq accepts logs via HTTP, GELF, custom inputs, and the seqcli command-line client, with plug-ins or 
	  integrations available for .NET Core, Java, Node.js, Python, Ruby, Go, Docker, message queues, and many 
        other technologies.

      How to use Seq.
      - you must download it from datalust.co/seq website, free for download for very small scale use.
        ** Note: This sets up a service to run in the background of your PC and gives you a default port.
   
      - In the appsettings.json file add another section to "WriteTo" for Seq
      {
        "Name": "Seq",
        "Args": { "serverUrl":  "http://localhost:5341"} -> This is the default port Seq uses unless specified otherwise.
      }


  - What is Cross-Origin Resource Sharing (CORS)?
    Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) 
    other than its own from which a browser should permit loading resources. CORS also relies on a mechanism by which browsers make a "preflight" 
    request to the server hosting the cross-origin resource, in order to check that the server will permit the actual request. In that preflight, 
    the browser sends headers that indicate the HTTP method and headers that will be used in the actual request. CORS Policy restricts the machines 
    that access an API. 
    
    -> To use CORS in .NET API application
    * In the services section of Program.cs
      builder.Services.AddCors(options => {
      	options.AddPolicy("AllowAll", b => b.AllowAnyMethod()
					   b.AllowAnyHeader()
					   b.AllowAnyOrigin());
	});
    
    * In the application section of Program.cs
      app.UseCors("AllowAll"); ** Note: You add the name of the Cors Policy 
      
    ** Note: When you inject the context, or any other object, into the constructor of the controller. This is called inversion of control (IoC) 
             container or Dependancy Inversion, which is part of the SOLID principles.
       
      public class MyAppController : ControllerBase
      {
          private readonly ApplicationDbContext context;
	  
	    public MyAppController(ApplicationDbContext context)
	    {
	  	this.context = context
	    }
	  
      
- What are the SOLID Principles:
  In software engineering, SOLID is a mnemonic acronym for five design principles intended to make object-oriented designs more understandable, flexible, 
  and maintainable

 -> The SOLID stands for:
    * (S)ingle-responsibility principle: There should never be more than one reason for a class to change. In other words, every class should have 
       only one responsibility. 
    * (O)penâ€“closed principle: Software entities should be open for extension, but closed for modification. 
    * (L)iskov substitution principle: Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it,
                                       also known as design by contract.
    * (I)nterface segregation principle: Clients should not be forced to depend upon interfaces that they do not use. 
    * (D)ependency inversion principle: Depend upon abstractions, [not] concretions. 
      

When Creating an WebApi Controller
      
** Note: You don't want to have your entity class (Database Model) to be the class to transport aka 'taxi' data. Your entity class needs to be what the database 
         interacts with NOT your endpoints. This is when you use Data Transfer Objects (DTO)

What is a Data Transfer Object (DTO)?
- DTO (Data Transfer objects) is a data container for moving data between layers. They are also termed as transfer objects. DTO is only used to pass data and 
  does not contain any business logic. They only have simple setters and getters. 

** Note: Use Automapper package to translate entity classes to dto classes. 
     
  How to use AutoMapper
  1) Import Package: AutoMapper.Extensions.Microsoft.DependencyInjection
  2) Create folder to hold mappings in project: Configurations
  3) Create new class called MapperConfig and inherit Profile from the Automapper namespace
     Example: public class MapperConfig : Profile

  4) Add constructor to class and create the map between the entity class and the dto class
     Example:
	public class MapperConfig : Profile
      {
        public MapperConfig()
        {
            CreateMap<MyThingDTO, MyThing>().ReverseMap();
        }
      }

  5) Registure the automapper class in the services section 
     Example: builder.Services.AddAutoMapper(typeof(MapperConfig));

  6) In the controller or file that will use the automapper for the Dto, inject the IMapper interface into the constructor
     Example: 
        private readonly IMapper mapper;
        public AuthorsController(ApplicationDbContext context, IMapper mapper)
        {
            _context = context;
            this.mapper = mapper;
        }
  
  7) In the Method that recieves the DTO object add the mapping, this creates a MyThing object mapped from the MYThingDto
     Example: var myThing = mapper.Map<MyThing>(myThingDto);
 


** Note: You can have one DTO to handle all the operations (Get, Post, Put, Delete) but the danger in that is you could be exposing properties 
         that you don't want to expose for certain operations.

- What is the .ProjectTo<> Method:
  Allows Entity Framework becomes more effienct for mapping.
  Example: await _context.Books
                    .Include(x => x.Author)
                    .ProjectTo<BookReadOnlyDTO>(mapper.ConfigurationProvider)
                    .ToListAsync();
     

- JWT Authentication
  Current industry standard with authenticating on APIs especially since it's is stateless. Meaning that there is no real application running to store
  you session and so on.  

-  Migrations Files
   When adding a migrations file the EntityTables class has two methods, Up & Down
   * Up : What changes I want to go up to the database
   * Down: What i will undo the migration by dropping what it created, will delete all data


 ** Note: When creating a ApplicationUser to append to the Identity tables, the PasswordHash. Identity has a way of hashing / encrypting and verifying passwords.

Authentication Controller
- When accepting data it's always good to use [HttpPost]

** Note: The regular signin method in .net core web development uses the UserManager to sign in and creates cookies that retain state. API's are stateless so they do not create cookies. 

- Setup JSON Web Tokens (JWT)
  JWT creates an encoded token that has Header, Payload (Data), and a verify Signature with an expiration date.

  1) In the appsettings.json file add another section:
     "JwtSettings": {
         "Issuer": "MyApplication.API", -> This is where the Token is being issued from
         "Audience":  "MyApiClient", -> Which application is consuming this key
         "Duration" 1, -> This is the time the token last before it expires (in minutes)
     }

  2) Right click project and select "Manage User Secrets" and extend the JwtSettings object in the secrets.json file
     "JwtSettings": {
         "Key": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
      }
     ** Note: This is so we add another level of security 
 
  3) Add a app.UseAuthentication() to the Program.cs file above app.UseAuthorization();
  4) Add Nuget Package : Microsoft.AspNetCore.Authentication.JwtBearer
  5) Add a service, under .AddCors:
     builder.Services.AddAuthentication(options =>
     {
         options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
	   options.DefaultChallengeScheme= JwtBearerDefaults.AuthenticationScheme;
     }).AddJwtBearer(options => {
       options.TokenValidationParameters = new TokenValidationParameters    -> These are standard configurations for security
       {
           ValidateIssuerSigningKey = true, -> states that the key must be valid with our key in secrets.json
           ValidateIssuer = true,
           ValidateAudience = true,
           ValidateLifetime = true, -> makes sure token hasn't expired
           ClockSkew = TimeSpan.Zero, -> deals with difference in time on client and server computers
           ValidIssuer = builder.Configuration["JwtSettings:Issuer"], -> From appsettings.json
           ValidAudience = builder.Configuration["JwtSettings:Audience"],  -> From appsettings.json
           IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["JwtSettings:Key"]))  -> From the secrets.json file
       };
   });

   6) Add a method in Auth Controller and set up claims


** Note: Claims are bits of information that lets the system know who you are and what you can do. Like name, role are claims. All claims are strings.
