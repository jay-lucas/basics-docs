What is MVC?
- MVC is short for Model, View, and Controller. MVC is a popular way of organizing your code. The big idea behind MVC is that each section of your 
  code has a purpose, and those purposes are different. Some of your code holds the data of your app, some of your code makes your app look nice, 
  and some of your code controls how your app functions. MVC is a way to organize your code’s core functions into their own, neatly organized boxes. 
  This makes thinking about your app, revisiting your app, and sharing your app with others much easier and cleaner.
  
Parts of MVC
- Model : Model code typically reflects real-world things. This code can hold raw data, or it will define the essential components of your app. For instance, 
          if you were building a To-do app, the model code would define what a “task” is and what a “list” is – since those are the main components of a todo app.

- View : View code is made up of all the functions that directly interact with the user. This is the code that makes your app look nice, and otherwise defines how 
         your user sees and interacts with it.

- Controller : Controller code acts as a liaison between the Model and the View, receiving user input and deciding what to do with it. It’s the brains of the 
               application, and ties together the model and the view.
               ** Note: Controllers shouldn't be overly complicated by too many responsibilities. To keep controller logic from becoming overly complex, push 
                        business logic out of the controller and into the domain model.
               
.NET MVC Application
- The ASP.NET Core MVC framework is a lightweight, open source, highly testable presentation framework optimized for use with ASP.NET Core. ASP.NET Core MVC 
  provides a patterns-based way to build dynamic websites that enables a clean separation of concerns. It gives you full control over markup, supports 
  Test Driven Development (TDD) friendly development and uses the latest web standards.
  
Routing in MVC
- ASP.NET Core MVC is built on top of ASP.NET Core's routing, a powerful URL-mapping component that lets you build applications that have comprehensible and 
  searchable URLs. This enables you to define your application's URL naming patterns that work well for search engine optimization (SEO) and for link generation, 
  without regard for how the files on your web server are organized. You can define your routes using a convenient route template syntax that supports route 
  value constraints, defaults and optional values.
  
  * Two kind of Routing
  - Convention-based routing: Enables you to globally define the URL formats that your application accepts and how each of those formats maps to a specific action 
                              method on a given controller. When an incoming request is received, the routing engine parses the URL and matches it to one of the 
                              defined URL formats, and then calls the associated controller's action method.
                              Example: 
                                routes.MapRoute(name: "Default", template: "{controller=Home}/{action=Index}/{id?}");
                                ** Note: This code is put into the Program.cs file in your MVC project
                              
  - Attribute routing: Enables you to specify routing information by decorating your controllers and actions with attributes that define your application's routes. 
                       This means that your route definitions are placed next to the controller and action with which they're associated.    
                       Example: 
                         [Route("api/[controller]")]
                          public class MyController : Controller
                          {
                              [HttpGet("{id}")]
                              public IActionResult GetProduct(int id)
                              {
                                  ...
                              }
                          }
                          ** Note: This code is put into a Controller class (MyController.cs) in the Controllers folder in your MVC project
  
  
  Model Binding
  - ASP.NET Core MVC model binding converts client request data (form values, route data, query string parameters, HTTP headers) into objects that the controller 
    can handle. As a result, your controller logic doesn't have to do the work of figuring out the incoming request data; it simply has the data as parameters to 
    its action methods.
    Example: 
      public async Task<IActionResult> Login(LoginViewModel model, string returnUrl = null) { ... }
      ** Note: This code is a method that's put into a Controller class file
      
  Model Validation
  - ASP.NET Core MVC supports validation by decorating your model object with data annotation validation attributes. The validation attributes are checked on the 
    client side before values are posted to the server, as well as on the server before the controller action is called.
    Example:
      using System.ComponentModel.DataAnnotations;
      public class MyViewModel
      {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
      }
      ** Note: This code is the Model class (MyViewModel.cs) located in the Model Folder. You need models for the databinding.
    
      Use in the controller action:
        public async Task<IActionResult> Login(LoginViewModel model, string returnUrl = null)
        {
            if (ModelState.IsValid)
            {
                // work with the model
            }
            // At this point, something failed, redisplay form
            return View(model);
        }      
        ** Note: The framework handles validating request data both on the client and on the server. Validation logic specified 
                 on model types is added to the rendered views as unobtrusive annotations and is enforced in the browser with jQuery Validation.
                 
Dependency Injection
- ASP.NET Core has built-in support for dependency injection (DI). In ASP.NET Core MVC, controllers can request needed services through their 
  constructors, allowing them to follow the Explicit Dependencies Principle. Your app can also use dependency injection in view files, 
  using the @inject directive.
  Example: 
    @inject SomeService ServiceName

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <title>@ServiceName.GetTitle</title>
    </head>
    <body>
        <h1>@ServiceName.GetTitle</h1>
    </body>
    </html>
    ** Note: This code is HTML code, with the extention .cshtml, located in either the Views or Shared Folders in your projects directory
    
 Filters
 - Filters help developers encapsulate cross-cutting concerns, like exception handling or authorization. Filters enable running custom 
   pre- and post-processing logic for action methods, and can be configured to run at certain points within the execution pipeline for a 
   given request. Filters can be applied to controllers or actions as attributes (or can be run globally). Several filters (such as Authorize) 
   are included in the framework. [Authorize] is the attribute that is used to create MVC authorization filters.
   Example:
     [Authorize]
     public class AccountController : Controller
     ** Note: Filters can be added at the controller level as seen here or at the method level

Areas
- Areas provide a way to partition a large ASP.NET Core MVC Web app into smaller functional groupings. An area is an MVC structure inside an 
  application. In an MVC project, logical components like Model, Controller, and View are kept in different folders, and MVC uses naming conventions 
  to create the relationship between these components. For a large app, it may be advantageous to partition the app into separate high level areas 
  of functionality. For instance, an e-commerce app with multiple business units, such as checkout, billing, and search etc. Each of these units have 
  their own logical component views, controllers, and models.
  
Web APIs
- In addition to being a great platform for building web sites, ASP.NET Core MVC has great support for building Web APIs. You can build services that 
  reach a broad range of clients including browsers and mobile devices. The framework includes support for HTTP content-negotiation with built-in 
  support to format data as JSON or XML. Write custom formatters to add support for your own formats. 
  Use link generation to enable support for hypermedia. Easily enable support for cross-origin resource sharing (CORS) so that your Web APIs can be 
  shared across multiple Web applications.
  
  * What is Cross-origin resource sharing (CORS)
  - Cross-Origin Resource Sharing (CORS) is an HTTP -header based mechanism that allows a server to indicate any origins (domain, scheme, or port) 
    other than its own from which a browser should permit loading resources.
    
Testability
- The framework's use of interfaces and dependency injection make it well-suited to unit testing, and the framework includes  
  features (like a TestHost and InMemory provider for Entity Framework) that make integration tests quick and easy as well.
  
Razor view engine
 - ASP.NET Core MVC views use the Razor view engine to render views. Razor is a compact, expressive and fluid template markup language for defining 
   views using embedded C# code. Razor is used to dynamically generate web content on the server. You can cleanly mix server code with client side 
   content and code. Using the Razor view engine you can define layouts, partial views and replaceable sections
   Example: 
     <ul>
        @for (int i = 0; i < 5; i++) {
          <li>List item @i</li>
        }
     </ul>
    ** Note: The razor view engine allows for the intergration of C# code and HTML into the .cshtml pages
    
Strongly typed views
- Razor views in MVC can be strongly typed based on your model. Controllers can pass a strongly typed model to views enabling your views to have 
  type checking and IntelliSense support. A Model is strongly typed to a View using the keyword @model followed by the name of the model.
  Example: 
      @model IEnumerable<Product>
      <ul>
          @foreach (Product p in Model)
          {
              <li>@p.Name</li>
          }
      </ul>
      ** Note: Strongly typing is done in a .cshtml file
      
Tag Helpers
- Tag Helpers enable server side code to participate in creating and rendering HTML elements in Razor files. You can use tag helpers to define 
  custom tags (for example, <environment>) or to modify the behavior of existing tags (for example, <label>). Tag Helpers bind to specific elements 
  based on the element name and its attributes. They provide the benefits of server-side rendering while still preserving an HTML editing experience.
  There are many built-in Tag Helpers for common tasks - such as creating forms, links, loading assets and more - and even more available in public 
  GitHub repositories and as NuGet packages. Tag Helpers are authored in C#, and they target HTML elements based on element name, attribute name, or 
  parent tag. Tag Helpers are usually defined by adding an attribute, to HTML code inside the .cshtml file, 'asp-'. Tag Helpers provide an HTML-friendly 
  development experience and a rich IntelliSense environment for creating HTML and Razor markup. Most of the built-in Tag Helpers target existing HTML 
  elements and provide server-side attributes for the element.
  Example:
    <p>
      Thank you for confirming your email.
      Please <a asp-controller="Account" asp-action="Login">Click here to Log in</a>.
    </p>
    ** Note: There are framework defined tag helpers (ie. asp-controller, asp-action ...) and custom (ie. asp-route-*)
    
Partial views
- A partial view is a.cshtml markup file without an @page directive maintained within the Views folder (MVC) or Pages folder (Razor Pages). In ASP.NET Core MVC, 
  a controller's ViewResult is capable of returning either a view or a partial view. In Razor Pages, a PageModel can return a partial view represented as a 
  PartialViewResult object.
  
View Components
- View Components allow you to package rendering logic and reuse it throughout the application. They're similar to partial views, but with associated logic.
  View components are similar to partial views, but they're much more powerful. View components don't use model binding, they depend on the data passed when 
  calling the view component. This article was written using controllers and views, but view components work with Razor Pages.

  * A view component:
    - Renders a chunk rather than a whole response.
    - Includes the same separation-of-concerns and testability benefits found between a controller and view.
    - Can have parameters and business logic.
    - Is typically invoked from a layout page.
  
    View components are intended anywhere reusable rendering logic that's too complex for a partial view, such as:
    - Dynamic navigation menus
    - Tag cloud, where it queries the database
    - Sign in panel
    - Shopping cart
    - Recently published articles
    - Sidebar content on a blog
    - A sign in panel that would be rendered on every page and show either the links to sign out or sign in, depending on the sign in state of the user

    A view component consists of two parts:
    - The class, typically derivd from ViewComponent
    - The result it returns, typically a view.
    
    Like controllers, a view component can be a POCO, but most developers take advantage of the methods and properties available by deriving from ViewComponent.
    When considering if view components meet an app's specifications, consider using Razor components instead. Razor components also combine markup with C# code 
    to produce reusable UI units. Razor components are designed for developer productivity when providing client-side UI logic and composition.

