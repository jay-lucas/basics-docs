Basics of Blazor
- Blazor is a hybrid of two workds: Razor and Browser
- Blazor is a templating engine to build dynamic content that's combining C# and Html
- Blazor is a framework for building interactive client-side web user interfaces with .NET. 
- Blazor shares server and client-side app logic written in C# .NET and applications are rendered in mainstream browsers without having to know JavaScript

Razor Definition
- Is a markup template that allows you to combine C# code and HTML. It helps with creating logic inside HTML / UI without Javascript. 

Blazor
- Make use of the components built with razor to render dynamic thats used to develop single page applications (SPA)
- Uses C# instead of JavaScript to create rich interactive web applications

Why Use Blazor?
- Blazor is a good replacement for SPA's frameworks like React, Angular.
- If C# is your prefered language and you don't want to use all endless JavaScript frameworks (jQuery, React, etc)
- Leverage all advantages of .NET and the .NET ecosystem (Security, Performance, Reliablity, etc)

How to build a Blazor App?
- Blazor apps are based on reuseable components
  * Components is a basic UI element like a page, dialog, or form written in form of a Razor page with the .razor file extension
  
- Blazor component syntax
  * The Razor html code
  <div> Count: @currentCount </div>
  * The C# code 
  @code {
    private int currentCount = 5;
  }

  Different Blazor Templates
  - WebAssembly 
  - Server
  
  Blazor Server App
  - Server side hosting model
  - Blazor executed on the Server within and ASP.NET app and the UI updates
  - Events, handling, and JavaScript calls are handled over a SingnalR connection
  - The Blazor app is not downloaded in the browser but executed on the Server
  - The user interacts with the Blazor app remotely via SingnalR connection
  - Cannot work off line
  
  Blazor WebAssembly App
  - Client Side hosting model
  - It's dependances and the .NET runtime are downloaded to the browser
  - The blazor app is executed on the browser via WebAssembly
  - All UI updates and Event handling happens in the same process
  
  When to choose:
  Blazor WebAssembly                            VS                     Blazor Server
  - WebAssembly can be used in offline mode                            - Server app requires a contstant connection to the internet and would
    a Progressive web app and can be easily                              be costly to scale as it always requires a server (Con)
    scaled to multiple users as each user                              - Supported by search engines (Pro)
    downloads the app into their browser. (Pro)
  - Faster than Server App (Pro)
 
  *Note: Once you learn either WebAssembly or Server you can do the other with minor tweeks. 

  Lifecycle of a Blazor Component
  - Begin: Rendered e.g. user opens page
  - End: Destroyed e.g user moves to new page
  - Lifecycle Methods: Control the changes in component during its life time
    Methods Flow:
    Parent Renders --> SetParametersAsync --> OnInitialized/OnInitializedAsync --> OnParametersSet/OnParametersSetAsync --> State Has Changed --> ShouldRender -->                                                                                                                                            OnAfterRender/OnAfterRenderAsync   
    Parent Remove from Render Tree --> IDisposable.Dispose --> Dispose Child Child Components
    
    SetParametersAsync: Executed whenever the parent renders
    - Used to set paramenters supplied by the parent to the child component in the components render tree
    - Holds any default parameter values that need to be declared to the child
    
    OnInitialized / OnInitializedAsync
    - Executed when a component is initialized
    - Used to load all data necessary before loading UIs, each control in the UI is loaded AFTER this method
    - Executed when component is recieves values from the parent in the render tree
    - Excuted only once when the component is first created and if at a later time the component parameters change, this method will be skipped

    OnParametersSet / OnParametersSetAsync
    - Executed when the component receives parameters from its parent when rendered for the first time
    - When parent rerenders and supplies the new changes in the parameters to the child component
    
    State Has Changed 
    - Notifies the component that its state has changed usually after user interaction
    - This method looks at the value returned from ShouldRender to decide if a UI re-render should happen
    - Called automatically for event call back methods and cause components to be re-rendered when nessary

    ShouldRender (After state has changed)
    - Returns a boolean value to refresh the UI if true, the app UI is refreshed
    - If returns false the next task is executed and the component tree is not recalculated
    - It is not executed for the first time the component is rendered
    - It does the initial rendering despite its return value
    
    OnAfterRender / OnAfterRenderAsync
    - Last method executed when the component tree is calculated
    - Executed after a component tree has been recalculated
    - Executed after each render of the component
    - Useful for impementing JS Interop
    - Can be used to perform an action such as attaching a event listener and requires the elements of the component to be rendered in the DOM and JS Interop
    
    
