What is PowerShell?
- PowerShell is a cross-platform task automation solution made up of a command-line shell, a scripting language, and a 
  configuration management framework. PowerShell runs on Windows, Linux, and macOS.

Error Handling
-> Different Types of Errors
   * Terminating Errors:
     Terminating errors are mostly an "exactly what it sounds like" package in general use. They're very similar to C#'s Exception system, although PowerShell uses 
     ErrorRecord as its base error object. 
     
     Their common characteristics are as follows:
	- Trigger try/catch blocks
	- Return control to the caller, along with the exception, if they're not handled using a try/catch block.
	
     There are a couple different ways to get a terminating error in PowerShell, and each has its own small differences that make them more useful in a tricky situation.

   * Non-Terminating Errors
     Non-terminating errors are PowerShell's concession demanded by the fact that it is a shell that supports pipelines. Not all errors warrant halting all ongoing actions, 
     and only need to inform the user that a minor error occurred, but continue processing the remainder of the items.

     Unlike terminating errors, non-terminating errors:
     - Do not trigger try/catch blocks.
     - Do not affect the script's control flow

 > Emit Errors Responsibly
	There are no true hard-and-fast rules here. If one solution works especially well for what you happen to be putting together, don't let me deter you. However, 
	I would urge you to consider both the impact to your users as well as yourself or your team before selecting a single-minded approach to error creation. 
	Not all error scenarios are created equal, so it's very rare that I would recommend using one type over all others.

	WriteError() is generally preferred over its cmdlet form Write-Error, because it offers more control over how you emit the error. 
	Both tend to be used for expected and technically avoidable errors that occur, but the $PSCmdlet method has the additional benefit of not divulging implementation 
	details unnecessarily.

	If you expect the error to occur sometimes, I would generally advise using WriteError() unless the error's presence significantly impairs your cmdlet's ability to 
	process the rest of its input, in which case I would use ThrowTerminatingError().

	'throw' is generally nice as a quick way to trigger a try/catch block in your own code, but I would also recommend using it for: those truly unexpected errors, 
	that last-ditch catch clause after several more specific catch blocks have been put in place and bypassed. At this point, a final ending catch block that simply 
	triggers a throw $_ call to re-throw the caught exception into the parent scope and quickly pass execution back to the caller. 

	It's a very quick and very effective 
	way to have the error be noticed, but should usually be kept internal to the function more than anything else, except in the last scenario mentioned. 
	Use of Write-Error -ErrorAction Stop may potentially also be substituted for that purpose if you personally prefer.

#####################################################
PowerShell Actions Cheatsheet

- Creating a .csv file with headers
  Add-Content -Path "C:\Desktop\test.csv" -Value '"col1","col2","col3"'
  * Adding content to newly created .csv

	$data = @(
	  		'"Adam","Bertram","abertram"'
	  		'"Joe","Jones","jjones"'
  			'"Mary","Baker","mbaker"'
  		   )
  
  	#This appends the data to the .csv by looping through each record in the variable $data
  	$data | foreach { Add-Content -Path $Folder"\$date\$csvFile" -Value $_ }

  * Display data in console from .csv
    Import-Csv $Folder"\$date\$csvFile" 

- Formating date
  $date = Get-Date -Format "dddd MM_dd_yyyy"

- Test is path is valid (True or False)
  Test-Path -Path $Folder

- Remove-Item cmdlet
  The Remove-Item cmdlet is a simple way to delete both files and folders. In fact, you can use it to delete any item, such as registry keys, aliases, and more. 
  You can even pipe values to this cmdlet, as a part of your code, provided the LiteralPath parameter is not used. Also, note that this cmdlet returns no output. 

Syntax
	* The syntax of Remove-Item is: 
	  Remove-Item
      	[-Path] <String[]>
      	[-Filter <String>]
      	[-Include <String[]>]
      	[-Exclude <String[]>]
      	[-Recurse]
      	[-Force]
      	[-Credential <PSCredential>]
      	[-WhatIf]
      	[-Confirm]
      	[-Stream <String[]>]
      	[<CommonParameters>]

- What to use and when.

	Confirm: Asks you to confirm the deletion before proceeding to remove that item. This parameter is more a check to avoid accidental deletions.
	Exclude: As the name suggests, it excludes certain files or folders from the deletion process. You can provide a string array and wildcard characters as inputs.
	Filter: This removes only those files and folders that match the filters you specify. It supports wildcards and regular expressions.
	Force: This parameter forces PowerShell to remove items such as hidden or read-only files that can’t be accessed otherwise. 
	Include: This parameter will include files and folders that meet your specifications. The input can be a string array or wildcard expression.
	LiteralPath: This parameter will treat a value as it is, and will not interpret wildcards.
	Path: This is used to specify the path of the file or folder.
	Recurse: This parameter deletes the files in the specified locations, as well as in all child items and references.
	Stream: This is a dynamic parameter available only on Windows and is used to delete from alternative data streams. Note that this parameter is not recommended due to possible security blocks.
	WhatIf: This parameter simply shows what will happen when the cmdlet is run, without actually executing it. This can come in handy when you want to examine possible scenarios.

	** Note: This cmdlet will automatically prompt for confirmation when you try to delete a folder with items in it. You can’t suppress this confirmation with any parameter. 

Examples

	-> Remove All Text Files from a Folder
	   Remove-Item –path c:\myfolder\ remove-item * -include *.txt –recurse
         ** Note: This PowerShell command removes all the text files from a folder called “myfolder”

   * Pipe Inputs to Remove-Item
     You can pipe inputs to this cmdlet.
     Get-ChildItem C:\testdata -Recurse -Filter “mydata” | Remove-Item -Force -Recurse
     ** Note: This command removes a folder called “mydata” and its contents forcefully from “C:\testdata” 

     Get-ChildItem | Where-Object Name -Like ‘*`[*’ | ForEach-Object { Remove-Item -LiteralPath $_.Name }

     Get-ChildItem
     ** Note: The above command removes all the files that contain special characters like parentheses and brackets. 

   * Delete the Hidden and Read-only Files
     ** Note: You must use the “force” parameter to delete hidden and read-only files.

     Remove-Item -Path C:\Test\hiddenfile.txt -Force
     ** Note: To delete multiple files in the same command, simply enter all the file names separated by commas or input a string array with file names and their respective paths. 

 - Use the Delete() Method
   Every object in PowerShell has a Delete() method and you can use it to remove that object. Object can be a file, folder, array, variable, registry keys, etc. 
   
   The generic command is:
   Object.Delete()

   To delete files and folders, use the Get-ChildItem command and use the Delete() method on the output.
   Example:
     (Get-ChildItem C:\testdata.txt).Delete()
     ** Note: Here, this command will delete a file called “testdata.txt”.

  -> Deleting Folders
     ** Note: The above command may not work for folders, especially if they are not empty.
	        For example, (Get-ChildItem C:\myfolder).Delete()  will throw an error.

              To resolve this error, pipe the value as input, and run it through a loop, like this:
	        Get-ChildItem C:\myfolder -Include *.* -Recurse | ForEach  { $_.Delete()}
 		  ** Note: You are returning all the files and sub-folders in the myfolder directory. The “Include” parameter includes all the files and subfolders 
			     within the folder while the “Recurse” parameter goes inside the sub-folders recursively and outputs each file inside them. The output is then 
			     piped to a ForEach loop. And inside this loop, you delete the file or sub-folder until there are no more files or sub-folders in the directory.

                       While this command deletes all the files and sub-folders in a folder, it does not delete the folder itself. Rather, it empties the folder and 
			     prepares it for deletion. 

			     To check if a folder is empty,  use the following PowerShell cmdlet.
			     Get-ChildItem C:\myfolder
			     ** Note: This should not return any value. Now, you’re all set to delete the empty folder. 

			     The command to delete an empty folder is:
                       (Get-ChildItem C:\myfolder).Delete()

 

- PowerShell Classes

	class Person {
	  [string] $FirstName                                       # Define a class property as a string
	  [string] $LastName = 'Sullivan'                           # Define a class property with a default value
	  [int] $Age                                                # Define a class property as an integer
  
	  Person() {                                                # Add a default constructor (no input parameters) for a class
	  }
  
	  Person([string] $FirstName) {                             # Define a class constructor with a single string parameter
	    $this.FirstName = $FirstName
	  }
  
	  [string] FullName() {
	    return '{0} {1}' -f $this.FirstName, $this.LastName
	  }
	}
	$Person01 = [Person]::new()                                 # Instantiate a new Person object.
	$Person01.FirstName = 'Trevor'                              # Set the FirstName property on the Person object.
	$Person01.FullName()                                        # Call the FullName() method on the Person object. Returns 'Trevor Sullivan'


	class Server {                                              # Define a "Server" class, to manage remote servers. Customize this based on your needs.
	  [string] $Name
	  [System.Net.IPAddress] $IPAddress                         # Define a class property as an IPaddress object
	  [string] $SSHKey = "$HOME/.ssh/id_rsa"                    # Set the path to the private key used to authenticate to the server
	  [string] $Username                                        # Set the username to login to the remote server with
  
	  RunCommand([string] $Command) {                           # Define a method to call a command on the remote server, via SSH
	    ssh -i $this.SSHKey $this.Username@$this.Name $this.Command
	  }
	}

	$Server01 = [Server]::new()                                 # Instantiate the Server class as a new object
	$Server01.Name = 'webserver01.local'                        # Set the "name" of the remote server
	$Server01.Username = 'root'                                 # Set the username property of the "Server" object
	$Server01.RunCommand("hostname")                            # Run a command on the remote server
