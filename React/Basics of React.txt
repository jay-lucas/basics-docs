- What is React?
  React is a JavaScript library for building user interfaces using components. React makes building complex,
  interactive and reactive user interfaces simpler. 

- What is a Component?
  
- First code that is hit in a React project is the index.js file in the src folder. 

Create a new React project 
1) Navigate to directory you want your react project to be
2) You have to have node.js install on your system
3) Terminal Command from project directory:
      Terminal: npx create-react-app <Name of project>


Two alternative ways of setting props
Array
  const expenses = [
    { title: "Car Insurance", amount: 294.67, date: new Date(2023, 2, 28) },
    { title: "Home Insurance", amount: 500.00, date: new Date(2023, 1, 1) }
  ]

1) 
  Page:
  <ExpenseItem title={expenses[0].title} amount={expenses[0].amount} date={expenses[0].date} />

  Component:
  function ExpenseItem(props) {

      return (
          <div className='expense-item'>
              <div>{props.date.toDateString()}</div>
              <div className='expense-item__description'>
                  <h2>{props.title}</h2>
                  <div className='expense-item__price'>${props.amount}</div>
              </div>
          </div>
      );
  }

  2) 
  Page:
  <ExpenseItem expense={expenses[0]} />

  Component:
  function ExpenseItem(props) {

      return (
          <div className='expense-item'>
              <div>{props.expenses.date.toDateString()}</div>
              <div className='expense-item__description'>
                  <h2>{props.expenses.title}</h2>
                  <div className='expense-item__price'>${props.expenses.amount}</div>
              </div>
          </div>
      );
  }

alternative for components
1)  
  Component:
  function ExpenseItem(props) {

      return (
          <div className='expense-item'>
              <div>{props.expenses.date.toDateString()}</div>
              <div className='expense-item__description'>
                  <h2>{props.expenses.title}</h2>
                  <div className='expense-item__price'>${props.expenses.amount}</div>
              </div>
          </div>
      );
  }

  2) Object Destructuring

  Component:
  function ExpenseItem({date, title, amount}) {

      return (
          <div className='expense-item'>
              <div>{date.toDateString()}</div>
              <div className='expense-item__description'>
                  <h2>{title}</h2>
                  <div className='expense-item__price'>${amount}</div>
              </div>
          </div>
      );
  }

  Creating Elements in react 
  - Original JSX code
    return (
        <div>
            <h2>Let's get started!</h2>
            <Expenses item={expenses}
        </div>
    );

  - Alternative: Let react create the Elements instead of JSX
    return React.createElement(
        'div',
        {},
        React.createElement('h2', {}, "Let's get started!"),
        React.createElement(Expenses, {items: expenses;})
    );

  Arrow function syntax
  - Original
    function App() {
        return ("...")
    }

    function Card(props) {
        const classes = 'card ' + props.className;
        return (
            <div className={classes}>{props.children}</div>
        );
    }

  - Arrow function syntax
    const App = () => {
        return ("...")
    }

    const Card = (props) => {
        const classes = 'card ' + props.className;
        return (
            <div className={classes}>{props.children}</div>
        );
    }

- User Interaction and States
  **Note: When using an event attribute to call a function, you don't add the (). If you add ()
          the code will actually execute the function when the function name is evaluated. Without
          the () the clickHandler will execute only when onClick occurs. 
    
    Example:     
    const clickHandler = () => {
        console.log('Clicked!');
    };
    or 
    function clickHandler() {
        console.log('Clicked!'); 
    }
    <button onClick={clickHandler}>Change Title</button>

    **Note: Best practice is to append function name that are triggered with by events end with
            *Handler. Example: xyzHandler, hoverHandler, clickHandler