Module 07 (CSS): Implement secure cloud solutions
 
Lab 07: Access resource secrets more securely across services
 
Exercise 1: Create Azure resources
Task 1: Open the Azure portal
    On the taskbar, select the Microsoft Edge icon.

    In the open browser window, browse to the Azure portal at https://portal.azure.com, and then sign in with the account you'll be using for this lab.

    Note: If this is your first time signing in to the Azure portal, you'll be offered a tour of the portal. Select Get Started to skip the tour and begin using the portal.

Task 2: Create a Storage account
    In the Azure portal, use the Search resources, services, and docs text box to search for Storage Accounts, and then in the list of results, select Storage accounts.

    On the Storage accounts blade, select + Create.

    On the Create a storage account blade, on the Basics tab, perform the following actions, and select Review:

    Setting	                        Action
    Subscription drop-down list	    Retain the default value
    Resource group section	        Select Create new, enter ConfidentialStack, and then select OK
    Storage account name text box	Enter securestor[yourname]
    Region drop-down list	        Select (US) East US
    Performance section	            Select the Standard option
    Redundancy drop-down list	    Select Locally-redundant storage (LRS)

    On the Review tab, review the options that you selected during the previous steps.

    Select Create to create the storage account by using your specified configuration.

    Note: Wait for the creation task to complete before you move forward with this lab.

    On the Deployment Overview blade, select Go to resource.

    On the Storage account blade, in the Security + networking section, select the Access keys link.

    In the Access keys section, select Show keys.

    Select any one of the keys and record the value in either of the Connection string boxes. You'll use this value later in this lab.

    Note: It doesn't matter which connection string you choose. They're interchangeable.

Task 3: Create an Azure Key Vault
    In the Azure portal, use the Search resources, services, and docs text box to search for Key vaults, and then in the list of results, select Key vaults.

    On the Key vaults blade, select Create.

    On the Create key vault blade, on the Basics tab, perform the following actions, and then select Review + create:

    Setting	                            Action
    Subscription drop-down list	        Retain the default value
    Resource group drop-down list	    Select ConfidentialStack in the list
    Key vault name text box	            Enter securevault[yourname]
    Region drop-down list	            Select East US
    Pricing tier drop-down list	        Select Standard

    On the Review + create tab, review the options that you selected during the previous steps.

    Select Create to create the key vault by using your specified configuration.

    Note: Wait for the creation task to complete before you move forward with this lab.

Task 4: Create a Function app
    In the Azure portal, use the Search resources, services, and docs text box to search for Function App, and then in the list of results, select Function App.

    On the Function App blade, select Create.

    On the Create Function App blade, on the Basics tab, perform the following actions, and then select Next: Hosting:

    Setting	                                        Action
    Subscription drop-down list	                    Retain the default value
    Resource group drop-down list	                Select ConfidentialStack
    Function App name text box	                    Enter securefunc[yourname]
    Publish section	                                Select Code
    Runtime stack drop-down list	                Select .NET
    Version drop-down list	                        Select 6
    Region drop-down list	                        Select the East US region
    Operating System section	                    Select Linux
    Plan type drop-down list	                    Select Consumption (Serverless)

    On the Storage tab, perform the following actions, and then select Review + create:

    Setting	                        Action
    Storage account drop-down list	Select the securestor[yourname] storage account

    On the Review + create tab, review the options that you selected during the previous steps.

    Select Create to create the function app by using your specified configuration.

    Note: Wait for the creation task to complete before you move forward with this lab.

Review
In this exercise, you created all the resources that you'll use in this lab.

Exercise 2: Configure secrets and identities
Task 1: Configure a system-assigned managed service identity
    On the Azure portal's navigation pane, select the Resource groups link.

    On the Resource groups blade, select the ConfidentialStack resource group.

    On the ConfidentialStack blade, select the securefunc[yourname] function app.

    Note: There will be two resources, a function app and application insights resource, with the same name. Make sure you select the function app resource.

    On the Function App blade, select the Identity option from the Settings section.

    On the Identity pane, on the System assigned tab, set the Status to On, and then select Save.

    Select Yes to confirm the setting.

    Note: Wait for the system-assigned managed identity to be created before you move forward with this lab.

Task 2: Create a Key Vault secret
    On the Azure portal's navigation pane, select the Resource groups link.

    On the Resource groups blade, select the ConfidentialStack resource group.

    On the ConfidentialStack blade, select the securevault[yourname] key vault.

    On the Key Vault blade, select the Secrets link in the Objects section.

    On the Secrets pane, select + Generate/Import.

    On the Create a secret blade, perform the following actions, and then select Create:

    Setting	                            Action
    Upload options drop-down list	    Select Manual
    Name text box	                    Enter storagecredentials
    Value text box	                    Enter the storage account connection string that you recorded previously in this lab
    Content type text box	            Leave blank
    Set activation date check box	    Not selected
    Set expiration date check box	    Not selected
    Enabled option	                    Select Yes

    Note: Wait for the secret to be created before you move forward with this lab.

    Return to the Secrets pane, and then select the storagecredentials item in the list.

    On the Versions pane, select the latest version of the storagecredentials secret.

    On the Secret Version pane, perform the following actions:

    Select Show secret value to find the value of the secret.

    Record the value of the Secret Identifier text box because you'll use this later in the lab.

    Note: You're recording the value of the Secret Identifier text box, not the Secret Value text box.

Task 3: Configure a Key Vault access policy
    On the Azure portal's navigation pane, select the Resource groups link.

    On the Resource groups blade, select the ConfidentialStack resource group.

    On the ConfidentialStack blade, select the securevault[yourname] key vault.

    On the Key vault blade, select the Access policies link in the Overview section.

    On the Access policies pane, select + Create.

    On the Create an access policy blade, select 1 Permissons section and make the following selections:

    Setting	                                            Action
    Configure from a template drop-down list	        Leave blank
    Key permissions checkboxes	                        0 selected
    Secret permissions checkboxes	                    Select the GET permission
    Certificate permissions checkboxes	                0 selected

    Select the 2 Principal section and make the following selections:

    Setting	                    Action
    Select principal link	    Find and then select the service principal named securefunc[yourname]. The system-assigned managed identity you created previously in this lab will have the same name as the Azure Function resource
    
    Select 4 Review + create and select Create.

    Note: Wait for your changes to the access policies to save before you continue with this lab.

Task 4: Create a Key Vault-derived application setting
    On the Azure portal's navigation pane, select the Resource groups link.

    On the Resource groups blade, select the ConfidentialStack resource group.

    On the ConfidentialStack blade, select the securefunc[yourname] function app.

    On the Function App blade, select the Configuration option from the Settings section.

    On the Configuration pane, on the Application settings tab, select New application setting.

    In the Add/Edit application setting pop-up window, in the Name text box, enter StorageConnectionString.

    In the Value text box, construct a value by using the following syntax: @Microsoft.KeyVault(SecretUri=<Secret Identifier>), where the <Secret Identifier> placeholder represents the secret identifier you recorded earlier in this exercise.

    Note: For example, if your secret identifier is https://securevaultstudent.vault.azure.net/secrets/storagecredentials/17b41386df3e4191b92f089f5efb4cbf, the resulting value would be @Microsoft.KeyVault(SecretUri=https://securevaultstudent.vault.azure.net/secrets/storagecredentials/17b41386df3e4191b92f089f5efb4cbf).

    Leave the deployment slot setting check box set to its default value (not selected), and then select OK to close the pop-up window and to return to the Configuration section.

    Select Save to save your settings, and then in the save Changes confirmation pop-up dialog box, select Continue.

    Note: Wait for your application settings to save before you continue with the lab.

Review
In this exercise, you created a system-assigned managed service identity for your function app, and then gave that identity the appropriate permissions to get the value of a secret in your key vault. Finally, you created a secret that you referenced within your function app's configuration settings.

Exercise 3: Build an Azure Functions app
Task 1: Initialize a function project
    On the taskbar, select the Windows Terminal icon.

    Run the following command to change the current directory to the Allfiles (F):\Allfiles\Labs\07\Starter\func empty directory:
      powershell
        cd F:\Allfiles\Labs\07\Starter\func
      Note: In Windows Explorer remove the Read-only attribute from F:\Allfiles\Labs\07\Starter\func.gitignore file.

    Run the following command to use the Azure Functions Core Tools to create a new local Functions project in the current directory using the dotnet runtime:
      powershell
        func init --worker-runtime dotnet --force
      Note: You can review the documentation to create a new project using the Azure Functions Core Tools.

    Run the following command to build the .NET 6 project:
      powershell
        dotnet build
    
Task 2: Create an HTTP-triggered function

    Run the following command to use the Azure Functions Core Tools to create a new function named FileParser using the HTTP trigger template:
      powershell
        func new --template "HTTP trigger" --name "FileParser"
      Note: You can review the documentation to create a new function using the Azure Functions Core Tools.

    Close the currently running Windows Terminal application.

Task 3: Configure and read an application setting

    On the Start screen, select the Visual Studio Code tile.

    On the File menu, select Open Folder.

    In the File Explorer window that opens, browse to Allfiles (F):\Allfiles\Labs\07\Starter\func, and then select Select Folder.

    On the Explorer pane of the Visual Studio Code window, open the local.settings.json file.

    Note the current value of the Values object:
        json
        "Values": {
            "AzureWebJobsStorage": "UseDevelopmentStorage=true",
            "FUNCTIONS_WORKER_RUNTIME": "dotnet"
        }

    Update the value of the Values object by adding a new setting named StorageConnectionString, and then assigning it a string value of [TEST VALUE]:
        json
        "Values": {
            "AzureWebJobsStorage": "UseDevelopmentStorage=true",
            "FUNCTIONS_WORKER_RUNTIME": "dotnet",
            "StorageConnectionString": "[TEST VALUE]"
        }

    The local.settings.json file should now include:
        json
        {
            "IsEncrypted": false,
            "Values": {
                "AzureWebJobsStorage": "UseDevelopmentStorage=true",
                "FUNCTIONS_WORKER_RUNTIME": "dotnet",
                "StorageConnectionString": "[TEST VALUE]"
            }
        }

    Select Save to save your changes to the local.settings.json file.

    On the Explorer pane of the Visual Studio Code window, open the FileParser.cs file.

    In the code editor, delete all of the content.

    Add the following code within the FileParser.cs file:
    csharp
        using Microsoft.AspNetCore.Mvc;
        using Microsoft.Azure.WebJobs;
        using Microsoft.AspNetCore.Http;
        using System;
        using System.Threading.Tasks;
        public static class FileParser
        {
            /* Append an attribute to the Run method of type FunctionNameAttribute
                that has its name parameter set to a value of FileParser */ 
            [FunctionName("FileParser")]
            public static async Task<IActionResult> Run(
                /* Append an attribute to the request parameter of type  HttpTriggerAttribute
                that has its methods parameter array set to a single value of GET */
                [HttpTrigger("GET")] HttpRequest request)
            {
                /* Retrieve the value of the StorageConnectionString application setting by
                    using the Environment.GetEnvironmentVariable method and to store the result
                    in a string variable named connectionString */
                string connectionString = Environment.GetEnvironmentVariable("StorageConnectionString");
            /* Return the value of the connectionString variable as the HTTP response */
            return new OkObjectResult(connectionString);
        }
        }
    
    Select Save to save your changes to the FileParser.cs file.

Task 4: Validate the local function
    On the taskbar, select the Windows Terminal icon.

    Run the following command to change the current directory to the Allfiles (F):\Allfiles\Labs\07\Starter\func empty directory:
    powershell
        cd F:\Allfiles\Labs\07\Starter\func
    Run the following command to run the function app project:

    powershell
        func start --build
    Note: You can review the documentation to start the function app project locally using the Azure Functions Core Tools.

    On the taskbar, select the Windows Terminal icon again to open a new instance of the Windows Terminal application. Run the following command to change the current directory to the Allfiles (F):\Allfiles\Labs\07\Starter\func empty directory:
    powershell
        cd F:\Allfiles\Labs\07\Starter\func

    When you receive the open command prompt, run the following command to start the httprepl tool, setting the base Uniform Resource Identifier (URI) to http://localhost:7071:
    powershell
        httprepl http://localhost:7071
    Note: An error message is displayed by the httprepl tool. This message occurs because the tool is searching for a Swagger definition file to use to traverse the API. Because your function project doesn't produce a Swagger definition file, you'll need to traverse the API manually.

    When you receive the tool prompt, run the following command to browse to the relative api directory:
    powershell
        cd api

    Run the following command to browse to the relative fileparser directory:
    powershell
        cd fileparser

    Run the following command to run the get command:
    powershell
        get

    Observe the [TEST VALUE] value of the StorageConnectionString being returned as the result of the HTTP request:
    powershell
        HTTP/1.1 200 OK
        Content-Type: text/plain; charset=utf-8
        Date: Tue, 01 Sep 2020 23:35:39 GMT
        Server: Kestrel
        Transfer-Encoding: chunked
        [TEST VALUE]

    Run the following command to exit the httprepl tool:
    powershell
        exit

    Close all currently running instances of the Windows Terminal application.

Task 5: Deploy the function using the Azure Functions Core Tools
    On the taskbar, select the Windows Terminal icon.

    Run the following command to change the current directory to the Allfiles (F):\Allfiles\Labs\07\Starter\func empty directory:
      powershell
        cd F:\Allfiles\Labs\07\Starter\func
    
    Run the following command to sign in to the Azure Command-Line Interface (CLI):
      powershell
        az login
    
    In the Microsoft Edge browser window, enter the email address and password for your Microsoft account, and then select Sign in.

    Return to the currently open Windows Terminal window. Wait for the sign-in process to finish.

    Run the following command to publish the function app project (replace the <function-app-name> placeholder with the name of the function app you created earlier in this lab):
      powershell
        func azure functionapp publish <function-app-name>
      Note: As an example, if your Function App name is securefuncstudent, your command would be func azure functionapp publish securefuncstudent. You can review the documentation to publish the local function app project using the Azure Functions Core Tools.

    Wait for the deployment to finalize before you move forward with the lab.

    Close the currently running Windows Terminal application.

Task 6: Test the Key Vault-derived application setting
    On the taskbar, select the Microsoft Edge icon, and then select the tab that contains the Azure portal.

    On the Azure portal's navigation pane, select the Resource groups link.

    On the Resource groups blade, select the ConfidentialStack resource group.

    On the ConfidentialStack blade, select the securefunc[yourname] function app.

    On the Function App blade, select the Functions option in the Functions section.

    On the Functions pane, select the existing FileParser function.

    On the Function blade, select the Code + Test option in the Developer section.

    In the function editor, select Test/Run.

    In the automatically displayed pane, in the HTTP method list, select GET.

    Select Run to test the function.

    Review the results of the test run. The result should be your Azure Storage connection string.

Review
In this exercise, you used a service identity to read the value of a secret stored in Key Vault and returned that value as the result of a function app.

Exercise 4: Access Azure Blob Storage data
Task 1: Upload a sample storage blob
    On the Azure portal's navigation pane, select the Resource groups link.

    On the Resource groups blade, select the ConfidentialStack resource group.

    On the ConfidentialStack blade, select the securestor[yourname] storage account.

    On the Storage account blade, select the Containers link in the Data storage section.

    In the Containers section, select + Container.

    In the New container pop-up window, perform the following actions, and then select Create:

    Setting	                                    Action
    Name text box	                            Enter drop
    Public access level drop-down list	        Select Blob (anonymous read access for blobs only)
    
    Return to the Containers section, and then select the newly created drop container.

    On the Container blade, select Upload.

    In the Upload blob window, perform the following actions, and then select Upload:

    Setting	                    Action
    Files section	            Select Browse for files or use the drag and drop feature
    File Explorer window	    Browse to Allfiles (F):\Allfiles\Labs\07\Starter, select the records.json file, and then select Open
    
    Overwrite if files already exist check box	Ensure that this check box is selected
    Note: Wait for the blob to upload before you continue with this lab.

    Return to the Container blade, and then select the records.json blob in the list of blobs.

    On the Blob blade, find the blob metadata, and then copy the URL for the blob.

    On the taskbar, activate the shortcut menu for the Microsoft Edge icon, and then select New window.

    In the new browser window, refer to the URL that you copied for the blob.

    The JavaScript Object Notation (JSON) contents of the blob should now display. Close the browser window with the JSON contents.

    Return to the browser window with the Azure portal, and then close the Blob blade.

    Return to the Container blade, and then select Change access level.

    In the Change access level pop-up window, perform the following actions:

    In the Public access level drop-down list, select Private (no anonymous access).
    Select OK.
    On the taskbar, activate the shortcut menu for the Microsoft Edge icon, and then select New window.

    In the new browser window, refer to the URL that you copied for the blob.

    An error message indicating that the resource wasn't found should now display.

    Note: If the error message doesn't display, your browser might have cached the file. Select Ctrl+F5 to refresh the page until the error message displays.

Task 2: Pull and configure the Azure SDK for .NET
    On the taskbar, select the Windows Terminal icon.

    Run the following command to change the current directory to the Allfiles (F):\Allfiles\Labs\07\Starter\func empty directory:
      powershell
        cd F:\Allfiles\Labs\07\Starter\func
    
    Run the following command to add version 12.12.0 of the Azure.Storage.Blobs package from NuGet:
      powershell
        dotnet add package Azure.Storage.Blobs --version 12.12.0
      Note: The Azure.Storage.Blobs NuGet package references the subset of the Azure SDK for .NET required to write code for Azure Blob Storage.

    Close the currently running Windows Terminal application.

    On the Start screen, select the Visual Studio Code tile.

    On the File menu, select Open Folder.

    In the File Explorer window that opens, browse to Allfiles (F):\Allfiles\Labs\07\Starter\func, and then select Select Folder.

    On the Explorer pane of the Visual Studio Code window, open the FileParser.cs file.

    Add a using directive for the Azure.Storage.Blobs namespace:
      csharp
        using Azure.Storage.Blobs;
        Review the content of the FileParser.cs file, which should now include:

        csharp
        using Azure.Storage.Blobs;
        using Microsoft.AspNetCore.Mvc;
        using Microsoft.Azure.WebJobs;
        using Microsoft.AspNetCore.Http;
        using System;
        using System.Threading.Tasks;   
        public static class FileParser
        {
            [FunctionName("FileParser")]
            public static async Task<IActionResult> Run(
                [HttpTrigger("GET")] HttpRequest request)
            {
                string connectionString = Environment.GetEnvironmentVariable("StorageConnectionString");
                return new OkObjectResult(connectionString);
            }
        }

Task 3: Write Azure Blob Storage code using the Azure SDK for .NET
    Update the contents of the FileParser.cs file with the following code:
      csharp
        using Azure.Storage.Blobs;
        using Microsoft.AspNetCore.Mvc;
        using Microsoft.Azure.WebJobs;
        using Microsoft.AspNetCore.Http;
        using System;
        using System.Threading.Tasks;
        public static class FileParser
        {
            [FunctionName("FileParser")]
            public static async Task<IActionResult> Run(
                [HttpTrigger("GET")] HttpRequest request)
            {
                string connectionString = Environment.GetEnvironmentVariable("StorageConnectionString");
                /* Create a new instance of the BlobClient class by passing in your 
                connectionString variable, a  "drop" string value, and a 
                "records.json" string value to the constructor */
                BlobClient blob = new BlobClient(connectionString, "drop", "records.json");
            /* Use the BlobClient.DownloadAsync method to download the contents of 
            the referenced blob asynchronously, and then store the result in 
            a variable named "response" */
            var response = await blob.DownloadAsync();

            /* Return the value of the various content stored in the content 
                variable by using the FileStreamResult class constructor */
            return new FileStreamResult(response?.Value?.Content, response?.Value?.ContentType);
        }
        }
    
    Select Save to save your changes to the FileParser.cs file.

Task 4: Deploy and validate the Azure Functions app
    On the taskbar, select the Windows Terminal icon.

    Run the following command to change the current directory to the Allfiles (F):\Allfiles\Labs\07\Starter\func empty directory:
      powershell
        cd F:\Allfiles\Labs\07\Starter\func

    Run the following command to sign in to the Azure CLI:
      powershell
        az login
    
    In the Microsoft Edge browser window, enter the email address and password for your Microsoft account, and then select Sign in.

    Return to the currently open Windows Terminal window. Wait for the sign-in process to finish.

    Run the following command to publish the function app project again (replace the <function-app-name> placeholder with the name of the function app you used earlier in this lab):
      powershell
        func azure functionapp publish <function-app-name>
      Note: As an example, if your Function App name is securefuncstudent, your command would be func azure functionapp publish securefuncstudent. You can review the documentation to publish the local function app project using the Azure Functions Core Tools.

    Wait for the deployment to finalize before you move forward with the lab.

    Close the currently running Windows Terminal application.

    On the taskbar, select the Microsoft Edge icon, and then refer to the Azure portal.

    On the Azure portal's navigation pane, select the Resource groups link.

    On the Resource groups blade, select the ConfidentialStack resource group.

    On the ConfidentialStack blade, select the securefunc[yourname] function app.

    On the App Service blade, select the Functions option in the Functions section.

    On the Functions pane, select the existing FileParser function.

    On the Function blade, select the Code + Test option in the Developer section.

    In the function editor, select Test/Run.

    In the automatically displayed pane, in the HTTP method list, select GET.

    Select Run to test the function.

Review the results of the test run. The output will contain the content of the $/drop/records.json blob stored in your Azure Storage account.

Review
In this exercise, you used C# code to access a storage account, and then downloaded the contents of a blob.

Congratulations!
You have successfully completed this Lab press End to end your lab.
Live Chat