-  Destructuring Objects  
   When you need to get data out of an object
   Example:
   const data = [...] // json 
   function getBook(id) {
        return data.find((d) => d.id === id);
   }
   const book = getBook(2);
   const { title, author, pages, publicationDate, genres, hasMovieAdaptation } = book;
  
  * Spread Operator
    - It allows new properties and update existing ones for objects/arrays. This operator destructure
      an object and allows you to modify it into a new object
      **Note: Make sure the spread (...) at the beginning.

    Example: 
    const updatedBook = {...book,
    // Adding a new property
    moviePublicationDate: "2001-12-19",

    // Overwriting an existing property
    pages: 1210,
    };

-Assigning variables:
    var name = "Jay";   
    const name = "Jay";
    let name = "Jay";

  ** Notes: var and let create variables that can be reassigned another value. const creates "constant" variables 
            that cannot be reassigned another value. let is the preferred for variable declaration.
            
            -> var: a globally scoped var can be redefined within another scope. While this is not a problem if you 
                    knowingly want greeter to be redefined, it becomes a problem when you do not realize that a variable 
                    greeter has already been defined before.
                Example:
                    var greeter = "hey hi";
                    var times = 4;

                    if (times > 3) {
                        var greeter = "say Hello instead"; 
                    }
                    
                    console.log(greeter) // "say Hello instead"

            -> let: let is block scoped. A block is a chunk of code bounded by {}. A block lives in curly braces. 
                    Anything within curly braces is a block. We see that using hello outside its 
                    block (the curly braces where it was defined) returns an error. This is because let variables 
                    are block scoped. let can be updated but not re-declared.
                Example:
                    let greeting = "say Hi";
                    let times = 4;

                    if (times > 3) {
                            let hello = "say Hello instead";
                            console.log(hello);// "say Hello instead"
                        }
                    console.log(hello) // hello is not defined

            -> const: const declarations can only be accessed within the block they were declared.
                      const cannot be updated or re-declared, which means that the value of a variable
                      declared with const remains the same within its scope. It cannot be updated or re-declared. 
                      So if we declare a variable with const, we can neither do this:
                 Example:
                    const greeting = "say Hi";
                    greeting = "say Hello instead";// error: Assignment to constant variable. 

So a variable declared in a block with let  is only available for use within that block.
    
-Functions
    JavaScripts functions can also be created via "Arrow Functions" syntax. A syntax that's popular if your dealing with anonymous functions
    functions that don't need a name. 
    Examples: 
        - Regular Function Key word: 
        function testFun(age) {
            console.log(age);
        }

        - Anonymous Function: Functions that don't need a name
        function (age){
            console.log(age);
        }

        - Arrow Function syntax
        (age) => {
            console.log(age);
        }

    ** Note: Arrow functions never accept a name in front of them, they are always created in an
             anonymous way. Unless you set the arrow function to a const, let, or var.

    When working with Arrow Functions, you have a couple of "syntax shortcuts" available.
    Most importantly, you should know about the following alternatives:

        1) Omitting parameter list parentheses
        If your arrow functions takes exactly one parameter, you may omit the wrapping parentheses.

            Instead of 
                (userName) => { ... }

            you could write
                userName => { ... }
            
            ** Note: If your function takes no parameters, parentheses must not be omitted - () => { ... } is the only correct form in 
                    that case. If your function takes more than one parameter, you also must not 
                    omit parentheses.
                    Example:
                        userName, userAge => { ... } would be invalid 
                        ((userName, userAge) => { ... } is correct)!

        2) Omitting function body curly braces
        If your arrow function contains no other logic but a return statement, you may omit the curly braces and the return keyword.

            Instead of
                number => { 
                    return number * 3;
                }

            you could write
                number => number * 3;

            The following code would be invalid:
                number => return number * 3; // invalid because return keyword must also be omitted!
                number => if (number === 2) { return 5 }; // invalid because if statements can't be returned

        3) Special case: Just returning an object
        If you go for the shorter alternative explained in 2) and you're trying to return a JavaScript object, you may end up with the 
        following, invalid code:
                number => { age: number }; // trying to return an object

        This code would be invalid because JavaScript treats the curly braces as function body wrappers (not as code that creates a JS 
        object).

        To "tell" JavaScript that an object should be created (and returned) instead, the code would need to be 
        adjusted like this:
                number => ({ age: number }); // wrapping the object in extra parentheses

            By wrapping the object and its curly braces with an extra pair of parentheses, JavaScript understands that the curly 
            braces are not there to define a function body but instead to create an object. Hence that object then gets returned.      
    
        **Note: To call an anonymous function you have to assign it to a variable
        Example:
            let myAgePlusTwo = (age) => age + 2;
            myAgePlusTwo(30);

- Using functions as values
  When passing a function as a value, you must just use the name and remove the (), the () executes the function
  right away. To stop this you just use the name and the parent function will execute the function later when called.
  Example:
  function handleTimeout() {
    console.log("timed out");
  }

  const handleTimeout2 = () => {
    console.log("timed out again!");
  }
  // this is a function provided by the browser, takes 2 argument setTimeout(<function>, <time in milliseconds>)
  setTimeout(handleTimeout, 2000);
  setTimeout(handleTimeout2, 3000);
  // example of creating a function in the 
  setTimeout(() => {
    console.log('more timing out');
  }, 4000);

- Creating a custom function that expects a function as a parameter
  Example:
  const greeter = (greetFn) => {
    greetFn();
  }
  greeter(() => console.log("hi"));
 
- Defining functions inside fo functions
 
- Object in JavaScript
    Example:
        const user1 = {
            name: 'Max',
            age: 24
        }        
        console.log(user1);

        class User {
            constructor(name, age){
                this.name = name;
                this.age = age;
            }
            greet() {
                console.log('Hi')
            }
        }
        
        class Person {
            name = 'Max';
        }
        
        const person = new Person();
        console.log(person.name); // prints 'Max'     

- Searching adding within a array
  Example:
    -> Creating array
        const hobbies = ["Piano", "Boxing", "Cooking"];
    -> Adding to array
        hobbies.push("Coding");
    -> Searching array
        const index = hobbies.findIndex((item) => {
            return item === "Piano";
        });
        ** Short version
        const index = hobbies.findIndex((item) => item === "Piano");
 
- How to use map
  map creates a new collection and adds to an array of items. To transform any item to another kind of item.

  - Adding
  Example:
    const editedHobbies = hobbies.map((item) => item + "!"); // ["Piano!", "Boxing!", "Cooking!"] 
  - Transforming to an object
  Example:
    const editedHobbies = hobbies.map((item) => ({text: item})); // [Object, Object, Object] 
                                                                 // 0: Object
                                                                 // text: "Piano"
                                                                 // 1: Object
                                                                 // text: "Boxing"     

- Destructuring syntax
  Example 1:
    // Breaking up the first and last name array
        const userNameData = ["Jay","Lucas"];
        const firstName = userNameData[0];
        const lastName = userNameData[1];

    // shorten version thats using the 'Destructuring' syntax
        const [firstName, lastName] = ["Jay","Lucas"];

  Example 2:
    //  How to get the parameter of an object
        const user = {
            name: "Jay",
            age: 45
        };
        
        const name = user.name;
        const age = user.age;

    // shorten version thats using the 'Destructuring' syntax
        const {name, age} = {
            name: "Jay",
            age: 45
        }
        console.log(name);
        console.log(age);

    ** Note: You must use the same property name in the object unless you alias it like so:
            const {name: firstName, age} = {
            name: "Jay",
            age: 45
        }
        console.log(firstName);
        console.log(age);

  Example 3: 
    // standard pulling in an object into a function
        function storeOrder(order) {
            localStorage.setItem('id', order.id);
            localStorage.setItem('currency', order.currency);
        }

        storeOrder({id: 5, currency: 'USD', amount: 15.99}); // one argument / value!

    // shorten version thats using the 'Destructuring' syntax
        function storeOrder({id, currency}) { // destructuring
            localStorage.setItem('id', id);
            localStorage.setItem('currency', currency);
        }

        storeOrder({id: 5, currency: 'USD', amount: 15.99}); // one argument / value!

- Spread Operator
  Allows you to merge arrays to other arrays. The '...' pulls values of an array or object and adds them
  to a new arrays value.
  -> Array
        Example:
            const hobbies = ["Piano","Boxing"];
            const newHobbies = ["Reading]       
            const mergeHobbies = [...hobbies, ...newHobbies] 
            // Results would be mergeHobbies has both arrays in one array object
        
        ** Note: If you did the following example this way:
                const mergeHobbies = [hobbies, newHobbies] 
                // the results would be an array with 2 nested arrays inside
  -> Object
        Example:
            const user = {
                name: "Jay",
                age: 45
            };
            const extendUser = {
                isAdmin: true,
                ...user
            }
        ** Note: the spread Operator will add the properties of the 'user' object to the 'extendUser' object.

- Exports & Imports
    In JavaScript projects, you split your code across multiple JavaScript files - so-called modules. 
    You do this, to keep each file/ module focused and manageable.
    To still access functionality in another file, you need export  (to make it available) and 
    import  (to get access) statements.

    You got two different types of exports: default (unnamed) and named exports:
        default => export default ...; 
        named => export const someData = ...; 

    You can import default exports like this:
        import someNameOfYourChoice from './path/to/file.js'; 

    Surprisingly, someNameOfYourChoice  is totally up to you. Named exports have to be imported by their name:
        import { someData } from './path/to/file.js'; 

    A file can only contain one default and an unlimited amount of named exports. You can also mix the one default 
    with any amount of named exports in one and the same file.
    When importing named exports, you can also import all named exports at once with the following syntax:
        import * as upToYou from './path/to/file.js'; 

    upToYou  is - well - up to you and simply bundles all exported variables/functions in one JavaScript object. 
    For example, if you export const someData = ...  (/path/to/file.js ) you can access it on upToYou like this: 
        upToYou.someData 


Template Literals
- An ES6 feature that allows us to create strings that let us contain some JavaScript variables / expressions. It 
  constructs strings with the backtick `` .

Using Ternary Operator (Ternaries) instead of if/else statements
- Ternary Operator has 3 parts 
  Part 1: condition with ? 
  part 2: if condition is correct
  part 3: else condition
  Example: 
    pages > 1000 : 'That's big' : 'It's small';