- What is React?
  React is a JavaScript library for building user interfaces using components. React makes building complex,
  interactive and reactive user interfaces simpler. 

- What is a Component?
  
- First code that is hit in a React project is the index.js file in the src folder. 

Create a new React project 
1) Navigate to directory you want your react project to be
2) You have to have node.js install on your system
3) Terminal Command from project directory:
      Terminal: npx create-react-app <Name of project>


Declaring variables in State
        const [firstName, setFirstName] = useState(''); // No value set
        const [lastName, setLastName] = useState('Lucas'); // Value set Lucas
        
        console.log(firstName)

  Or with a object
        const [Person, setPerson] = useState({
            firstName: '',
            lastName: ''
        });
        
        console.log(Person.firstName)

** Note: useState returns an array with exactly two elements - the second element is always 
         a function which you can call to set a new value for your state. Calling that function 
         will then also trigger React to re-evaluate the component.

What are props?
Props are READ-ONLY! Props is data coming from the outside, and can only be updated by the parent component

What is state?
State is internal data that can be updated by the component's logic. You manage state within the component. 

Two alternative ways of setting props
Array
  const expenses = [
    { title: "Car Insurance", amount: 294.67, date: new Date(2023, 2, 28) },
    { title: "Home Insurance", amount: 500.00, date: new Date(2023, 1, 1) }
  ]

1) 
  Page:
  <ExpenseItem title={expenses[0].title} amount={expenses[0].amount} date={expenses[0].date} />

  Component:
  function ExpenseItem(props) {

      return (
          <div className='expense-item'>
              <div>{props.date.toDateString()}</div>
              <div className='expense-item__description'>
                  <h2>{props.title}</h2>
                  <div className='expense-item__price'>${props.amount}</div>
              </div>
          </div>
      );
  }

  2) 
  Page:
  <ExpenseItem expense={expenses[0]} />

  Component:
  function ExpenseItem(props) {

      return (
          <div className='expense-item'>
              <div>{props.expenses.date.toDateString()}</div>
              <div className='expense-item__description'>
                  <h2>{props.expenses.title}</h2>
                  <div className='expense-item__price'>${props.expenses.amount}</div>
              </div>
          </div>
      );
  }

alternative for components
1)  
  Component:
  function ExpenseItem(props) {

      return (
          <div className='expense-item'>
              <div>{props.expenses.date.toDateString()}</div>
              <div className='expense-item__description'>
                  <h2>{props.expenses.title}</h2>
                  <div className='expense-item__price'>${props.expenses.amount}</div>
              </div>
          </div>
      );
  }

  2) Object Destructuring

  Component:
  function ExpenseItem({date, title, amount}) {

      return (
          <div className='expense-item'>
              <div>{date.toDateString()}</div>
              <div className='expense-item__description'>
                  <h2>{title}</h2>
                  <div className='expense-item__price'>${amount}</div>
              </div>
          </div>
      );
  }

  Creating Elements in react 
  - Original JSX code
    return (
        <div>
            <h2>Let's get started!</h2>
            <Expenses item={expenses}
        </div>
    );

  - Alternative: Let react create the Elements instead of JSX
    return React.createElement(
        'div',
        {},
        React.createElement('h2', {}, "Let's get started!"),
        React.createElement(Expenses, {items: expenses;})
    );

  Arrow function syntax
  - Original
    function App() {
        return ("...")
    }

    function Card(props) {
        const classes = 'card ' + props.className;
        return (
            <div className={classes}>{props.children}</div>
        );
    }

  - Arrow function syntax
    const App = () => {
        return ("...")
    }

    const Card = (props) => {
        const classes = 'card ' + props.className;
        return (
            <div className={classes}>{props.children}</div>
        );
    }

- User Interaction and States
  **Note: When using an event attribute to call a function, you don't add the (). If you add ()
          the code will actually execute the function when the function name is evaluated. Without
          the () the clickHandler will execute only when onClick occurs. 
    
    Example:     
    const clickHandler = () => {
        console.log('Clicked!');
    };
    or 
    function clickHandler() {
        console.log('Clicked!'); 
    }
    <button onClick={clickHandler}>Change Title</button>

    **Note: Best practice is to append function name that are triggered with by events end with
            *Handler. Example: xyzHandler, hoverHandler, clickHandler

Example of counter
    import { useState } from 'react';
    export default function App() {
        const [counter, setCounter] = React.useState(0);
        
        function incrementCounterHandler() {
            setCounter(prevCounter => prevCounter + 1);
        }
        
        return (
        <div>
            <p id="counter">{counter}</p>
            <button onClick={incrementCounterHandler}>Increment</button>
        </div>
        );
    }            

    "Lifting State Up": Moving data from child component to a parent component to either use it in the 
                        parent or to another child component.

- Derived / Computed State: When your using a already established state function to update a component
                            without creating another state: 
    Example:
    function Expenses() {
    const [filteredYear, setFilteredYear] = useState('2019');

    let filterText = 'This is: ' + filteredYear;

    const filterChangeHandler = selectedYear => {
        setFilteredYear(selectedYear);
    };

        return (
        <div>
            <Card className='expenses'>
                <ExpenseFilter selected={filteredYear} onChangeFilter={filterChangeHandler}/>
                <div>{filterText}</div>
            </Card>
        );
    };          

    ** Note: When the filteredYear is changed, the filterText that's used in the return can be updated
             as well without creating another state variable
             
Controlled vs Uncontrolled components: 
- Controlled: When the values of a component are not controlled by itself but by a parent.    

Stateless vs Stateful Components:
- Stateless: Components that don't manage any kind of state variables